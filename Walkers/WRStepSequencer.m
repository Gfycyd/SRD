%this is a class that provides a reference sequence of steps. Should be
%used as an input for a planner (for initial guess sequence) or simple
%walking tasks
classdef WRStepSequencer < matlab.mixin.Copyable
    properties
        number_of_legs = 2;
        %number of legs the robot has
        
        leg_names = {'right'; 'left'};
        %the names of the legs
        
        sequence = [1; 2];
        %defines the sequence in which the leg move
        
        leg_translations = [0.14,  0.2, 0;
                            0.14, -0.2, 0];
        %defines how the legs landing positions reletive to the reference
        %point; each leg gets a row with a corresponding number.
        
        reference_point_weights = [0, 1;
                                   1, 0];
        % defines how the reference point will be calculated. The reference
        % point for the current leg calculeted as .leg_translations'*R,
        % where R is the row of .reference_point_weights with the number 
        % corresponding to the current leg's number
        
        current_positions = [0,  0.1, 0;
                             0, -0.1, 0];
        %defines the current leg's positions
        
        current_sequence_position = 1;
        %defines where in the sequence we are currently at
        
        history_log;
        %a log of all steps taken; a cell array, each element is a 
        % structure with fields .positions, .sequence_position,
        % corresponding to what values .current_positions and
        % .current_sequence_position had at the end of that step
        
        step_fix_function = [];
        %a handle of a function that fixes the step positions generated by
        %the sequencer
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% Visuals
        
        StepDrawingFunction = [];
        % user-provided step drawing function (handle); if none provided 
        % the steps are drawn as dots
        
    end
    methods
        function obj = WRStepSequencer()
            obj.Initisalize();
        end
        
        %initializes history log;
        function Initisalize(obj)
            H.positions = obj.current_positions;
            H.sequence_position = obj.current_sequence_position;
            
            obj.history_log = {H};
        end
        
        %this functin checks if the properties have correct sizes
        function all_is_fine = Check(obj)
            all_is_fine = true;
            if size(obj.leg_names, 1) ~= obj.number_of_legs
                all_is_fine = false;
                warrning('wrong size of .leg_names property of WRStepSequencer class');
            end
            if size(obj.sequence, 1) ~= obj.number_of_legs
                all_is_fine = false;
                warrning('wrong size of .sequence property of WRStepSequencer class');
            end
            if (size(obj.leg_translations, 1) ~= obj.number_of_legs) || (size(obj.leg_translations, 2) ~= 3)
                all_is_fine = false;
                warrning('wrong size of .leg_translations property of WRStepSequencer class');
            end
            if (size(obj.reference_point_weights, 1) ~= obj.number_of_legs) || (size(obj.reference_point_weights, 2) ~= obj.number_of_legs)
                all_is_fine = false;
                warrning('wrong size of .reference_point_weights property of WRStepSequencer class');
            end
        end
        
        %provides the reference point for the N-th leg;
        function ReferencePoint = GetReferencePoint(obj, N)
            ReferencePoint = obj.current_positions' * obj.reference_point_weights(N, :)';
        end
        
        %tells you what the next step is, but does not make it;
        %Output.LegNumber = the number of the leg that moves;
        %Output.ReferencePoint = the reference point used to calculate the step;
        %Output.StepFrom = where the leg is now;
        %Output.StepTo = where the leg should go to;
        function Output = WhatIsNextStep(obj)
            Output.LegNumber = obj.sequence(obj.current_sequence_position);
            
            Output.ReferencePoint = obj.GetReferencePoint(Output.LegNumber);
            
            Output.StepFrom = obj.current_positions(Output.LegNumber, :)';
            Output.StepTo = Output.ReferencePoint + obj.leg_translations(Output.LegNumber, :)';
            Output.NewState = obj.current_positions;
            Output.NewState(Output.LegNumber, :) = Output.StepTo';
            
            if ~isempty(obj.step_fix_function) 
                Output = obj.step_fix_function(Output);
            end
        end
        
        %make next step, has same output as WhatIsNextStep()
        function Output = MakeNextStep(obj)
            Output = obj.WhatIsNextStep();
            
            obj.current_positions = Output.NewState;
            obj.current_sequence_position = obj.current_sequence_position + 1;
            if obj.current_sequence_position > size(obj.sequence, 1)
                obj.current_sequence_position = 1;
            end
            
            H.positions = obj.current_positions;
            H.sequence_position = obj.current_sequence_position;
            obj.history_log = {obj.history_log{:}, H};
        end
        
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%% animation functions
        
        % the function that is used to draw steps by default (if the user 
        % didn't provide .StepDrawingFunction function handle)
        function h = DrawStep_default(~, Step, LegNumber)
            Current_axis = gca;
            CO = Current_axis.ColorOrder;
            N = mod(LegNumber, size(CO, 1));
            C = CO(N, :);
            
            h = plot3(Step(1), Step(2), Step(3), 'o', 'MarkerSize', 3, 'MarkerFaceColor', C, 'MarkerEdgeColor', 'k');
        end
        
        
        %Draws the positions of all steps
        function h = DrawState(obj, State)
            for i = 1:obj.number_of_legs
                Step = State(i, :)';
                if isempty(obj.StepDrawingFunction)
                    h(i) = obj.DrawStep_default(Step, i);
                else
                    h(i) = obj.StepDrawingFunction(Step, i);
                end
            end
        end
        
        %Draws the positions of one step
        function h = DrawOneStep(obj, Step, LegNumber)
            if isempty(obj.StepDrawingFunction)
                h = obj.DrawStep_default(Step, LegNumber);
            else
                h = obj.StepDrawingFunction(Step, LegNumber);
            end
        end
        
        %Demonstrates how the system works
        function Demonstrate(obj, NumberOfSteps, figure_handle, Parameters)
            
            if nargin < 2
                NumberOfSteps = [];
            end
            if isempty(NumberOfSteps)
                NumberOfSteps = 10;
            end
            
            if nargin < 3
                figure_handle = [];
            end
            if isempty(figure_handle)
                figure_handle = figure();
            else
                figure(figure_handle);
            end
            
            if nargin < 4
                Parameters = [];
            end
            if isfield(Parameters, 'pause_time')
                pause_time = Parameters.pause_time;
            else
                pause_time = 1.5;
            end
            if isfield(Parameters, 'axis_limits')
                axis_limits = Parameters.axis_limits;
            else
                axis_limits = [];
            end
            if isfield(Parameters, 'ResetFigure')
                ResetFigure = Parameters.ResetFigure;
            else
                ResetFigure = true;
            end
            
            if ResetFigure
                figure_handle.Color = 'w';
                view(3);
                axis equal;
                if ~isempty(axis_limits)
                    axis(axis_limits);
                end
                grid on;
            end
            hold on;
                
            history_log_backup = obj.history_log;
            current_positions_backup = obj.current_positions;
            current_sequence_position_backup = obj.current_sequence_position;
            
            obj.DrawState(obj.current_positions);
            for i = 1:NumberOfSteps
                Output = obj.MakeNextStep();
                obj.DrawOneStep(Output.StepTo, Output.LegNumber);
                
                h1 = plot3(Output.ReferencePoint(1), Output.ReferencePoint(2), Output.ReferencePoint(3), ...
                    'o', 'MarkerSize', 5, 'MarkerFaceColor', 'k', 'MarkerEdgeColor', 'k');
                
                V1 = [Output.ReferencePoint'; Output.StepTo'];
                V2 = [Output.StepFrom'; Output.StepTo'];
                h2 = plot3(V1(:, 1), V1(:, 2), V1(:, 3), 'LineWidth', 1, 'Color', 'b');
                h3 = plot3(V2(:, 1), V2(:, 2), V2(:, 3), 'LineWidth', 1, 'Color', 'r');
                
                pause(pause_time);
                delete([h1, h2, h3]);
            end
            
            obj.history_log = history_log_backup;
            obj.current_positions = current_positions_backup;
            obj.current_sequence_position = current_sequence_position_backup;
        end
        
        
    end
end